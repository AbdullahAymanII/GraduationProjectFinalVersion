name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Compile Project
        run: mvn clean compile
        working-directory: ./backend
#  test:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK
#        uses: actions/setup-java@v1
#        with:
#          java-version: '17'
#
#      - name: Run Unit Tests
#        run: mvn test -DskipTests=false
#        working-directory: ./editor

  build:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Build Project
        run: mvn clean package -DskipTests
        working-directory: ./backend
  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./editor

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    steps:
      - name: Deploy to AWS EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.AWS_EC2_KEY }} ubuntu@${{ secrets.AWS_EC2_IP }} 'docker pull ${{ secrets.DOCKER_USERNAME }}/backend1:latest && docker-compose up -d'
      - name: SSH into Backend EC2
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.AWS_BACKEND_HOST }}
            username: i-0adabf6ef59b093e9
            key: ${{ secrets.AWS_SSH_KEY }}
            script: |
              # Pull the latest backend image
              docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
              
              # Stop and remove existing backend container
              docker stop backend || true
              docker rm backend || true
              
              # Run MySQL container
              docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=mysql_db -p 3306:3306 -d mysql:8.0 || docker start mysql
              
              # Run MongoDB container
              docker run --name mongo -e MONGO_INITDB_ROOT_USERNAME=devroot -e MONGO_INITDB_ROOT_PASSWORD=devroot -p 27017:27017 -d mongo || docker start mongo
              
              # Run the backend container
              docker run -d -p 8080:8080 --name backend --link mysql:mysql --link mongo:mongo ${{ secrets.DOCKER_USERNAME }}/backend:latest
